;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://github.com/christophe-gouel/dotemacs/blob/master/README.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

(defconst is-mswindows (equal window-system 'w32)
  "Boolean indicating whether Emacs is excuted within MS Windows.")

(use-package package
  :ensure nil
  :config
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize))

(use-package use-package
  :ensure nil
  :custom
  ;; Always download packages if not available
  (use-package-always-ensure t))

(setq blink-cursor-blinks 0 ; curseur clignote indéfiniment
      custom-safe-themes t ; consider all themes as safe
      display-time-24hr-format t ; Affichage de l'heure format 24h
      column-number-mode t ; affichage du numéro de la colonne
      prettify-symbols-unprettify-at-point t
      show-trailing-whitespace t
      pixel-scroll-precision-mode t)
(setq-default cursor-type 'bar) ; curseur étroit
(set-face-background 'cursor "#CC0000") ; curseur rouge foncé
(when (display-graphic-p)
  (global-hl-line-mode +1) ; Highlight the current line
  ;; Fonts and unicode characters
  (add-to-list 'default-frame-alist
	       '(font . "JetBrains Mono"))
  (set-fontset-font t 'unicode (font-spec :name "XITS Math") nil 'prepend)
  (add-hook 'text-mode-hook 'prettify-symbols-mode))
(add-hook 'prog-mode-hook (lambda ()
			    (display-fill-column-indicator-mode)))

(use-package rainbow-mode)

(use-package nerd-icons
  :if (display-graphic-p)
  :custom
  (nerd-icons-font-family "Symbols Nerd Font Mono"))
(use-package nerd-icons-dired
  :if (display-graphic-p)
  :hook
  (dired-mode . nerd-icons-dired-mode))
(use-package nerd-icons-ivy-rich
  :if (display-graphic-p)
  :after counsel
  :init
  (nerd-icons-ivy-rich-mode 1)
  (ivy-rich-mode 1))
(use-package nerd-icons-ibuffer
  :if (display-graphic-p)
  :hook
  (ibuffer-mode . nerd-icons-ibuffer-mode))
(use-package nerd-icons-completion
  :if (display-graphic-p)
  :config
  (nerd-icons-completion-mode))

(use-package all-the-icons
  :if (display-graphic-p))

(use-package ligature
  :config
  ;; Enable all JetBrains Mono ligatures in programming modes
  (defconst jb-ligatures
    '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "///" "/=" "/==" "/>"
      "//" "/*" "*>" "***" ",*/" "<-" "<<-" "<=>" "<=" "<|" "<||" "<|||" "<|>"
      "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>" "<-|" "<<" "<~>" "<=|"
      "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*" "<*>" "<->" "<!--" ":>"
      ":<" ":::" "::" ":?" ":?>" ":=" "::=" "=>>" "==>" "=/=" "=!=" "=>" "==="
      "=:=" "==" "!==" "!!" "!=" ">]" ">:" ">>-" ">>=" ">=>" ">>>" ">-" ">="
      "&&&" "&&" "|||>" "||>" "|>" "|]" "|}" "|=>" "|->" "|=" "||-" "|-" "||="
      "||" ".." ".?" ".=" ".-" "..<" "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|"
      "??" "?." "?=" "?:" "##" "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_"
      "#?" "#(" ";;" "_|_" "__" "~~" "~~>" "~>" "~-" "~@" "$>" "^=" "]#"))
  (ligature-set-ligatures 'prog-mode jb-ligatures)
  (ligature-set-ligatures 'text-mode jb-ligatures)
  (ligature-set-ligatures 'comint-mode jb-ligatures)
  (ligature-set-ligatures 'special-mode jb-ligatures)
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))

(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config
  (if (not (display-graphic-p))
      (setq doom-modeline-icon nil)))

(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode)
  (yaml-mode . rainbow-delimiters-mode)
  :custom-face
  (rainbow-delimiters-depth-1-face ((t (:foreground "red"))))
  (rainbow-delimiters-depth-2-face ((t (:foreground "orange"))))
  (rainbow-delimiters-depth-3-face ((t (:foreground "cyan"))))
  (rainbow-delimiters-depth-4-face ((t (:foreground "green"))))
  (rainbow-delimiters-depth-5-face ((t (:foreground "blue"))))
  (rainbow-delimiters-depth-6-face ((t (:foreground "violet"))))
  (rainbow-delimiters-depth-7-face ((t (:foreground "purple"))))
  (rainbow-delimiters-depth-8-face ((t (:foreground "black"))))
  (rainbow-delimiters-unmatched-face ((t (:background "yellow")))))

(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-auto-character-face-perc 100)
(setq highlight-indent-guides-auto-even-face-perc 10)
(setq highlight-indent-guides-auto-odd-face-perc 10)
(setq highlight-indent-guides-auto-enabled t)
(setq highlight-indent-guides-method 'bitmap)

(use-package doom-themes
  :if (display-graphic-p)
  :custom
  ;; Global settings (defaults)
  (doom-themes-enable-bold t)   ; if nil, bold is universally disabled
  (doom-themes-enable-italic t) ; if nil, italics is universally disabled
  :config
  (load-theme 'doom-one-light t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  (defun my-switch-to-light-theme ()
    "Switch to doom-one-light theme after disabling current theme"
    (interactive)
    (mapcar #'disable-theme custom-enabled-themes)
    (load-theme 'doom-one-light t))
  (defun my-switch-to-dark-theme ()
    "Switch to doom-one theme after disabling current theme"
    (interactive)
    (mapcar #'disable-theme custom-enabled-themes)
    (load-theme 'doom-one t)))

(set-language-environment "UTF-8")
(prefer-coding-system       'utf-8)
;; (setq locale-coding-system 'utf-8) ; Mess up dired buffer under windows
(set-selection-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8-unix
      x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
(if is-mswindows    ;; MS Windows clipboard is UTF-16LE
    (set-clipboard-coding-system 'utf-16le-dos))

(setq user-full-name "Romain Capliez"
      user-mail-address "romain.capliez01@gmail.com")

(use-package pdf-tools
  :init
  (pdf-tools-install)  ; Standard activation command
  (pdf-loader-install) ; On demand loading, leads to faster startup time
  :config
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
	TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
	TeX-source-correlate-start-server t)
  (add-hook 'TeX-after-compilation-finished-functions
	    #'TeX-revert-document-buffer)
  :bind (:map pdf-view-mode-map
	      ("C-s" . isearch-forward)))

(global-set-key (kbd "C-c n s") 'pdf-annot-add-highlight-markup-annotation)

(use-package outline
  :ensure nil
  :custom

  (outline-minor-mode-use-buttons 'in-margins) ; add in-margin buttons to fold/unfold
  :config
  (unbind-key "RET" outline-overlay-button-map)
  :hook
  (text-mode . outline-minor-mode)
  (prog-mode . outline-minor-mode))

(use-package bicycle
  :after outline
  :bind (:map outline-minor-mode-map
              ([C-tab] . bicycle-cycle)
              ([S-tab] . bicycle-cycle-global)))

(use-package outline-minor-faces
  :after outline
  :hook
  (R-mode . outline-minor-faces-mode))

(use-package company
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (setq
   ;; Number the candidates (use M-1, M-2 etc to select completions).
   company-show-numbers t
   company-idle-delay 0)
  ;; company configuation from
  ;; <https://github.com/radian-software/radian/blob/develop/emacs/radian.el>
  :bind (;; Replace `completion-at-point' and `complete-symbol' with
         ;; `company-manual-begin'. You might think this could be put
         ;; in the `:bind*' declaration below, but it seems that
         ;; `bind-key*' does not work with remappings.
         ([remap completion-at-point] . company-manual-begin)
         ([remap complete-symbol] . company-manual-begin)

         ;; The following are keybindings that take effect whenever
         ;; the completions menu is visible, even if the user has not
         ;; explicitly interacted with Company.

         :map company-active-map

         ;; Make TAB always complete the current selection. Note that
         ;; <tab> is for windowed Emacs and TAB is for terminal Emacs.
         ("<tab>" . company-complete-selection)
         ("TAB" . company-complete-selection)

         ;; Prevent SPC from ever triggering a completion.
         ("SPC" . nil)

         ;; The following are keybindings that only take effect if the
         ;; user has explicitly interacted with Company.

         :map company-active-map
         :filter (company-explicit-action-p)

         ;; Make RET trigger a completion if and only if the user has
         ;; explicitly interacted with Company. Note that <return> is
         ;; for windowed Emacs and RET is for terminal Emacs.
         ("<return>" . company-complete-selection)
         ("RET" . company-complete-selection))

  :bind* (;; The default keybinding for `completion-at-point' and
          ;; `complete-symbol' is M-TAB or equivalently C-M-i. Here we
          ;; make sure that no minor modes override this keybinding.
          ("M-TAB" . company-manual-begin)))

(use-package company-bibtex)
(use-package company-math)
(use-package company-reftex)
(use-package company-jedi)

(setq company-backends
      (append
       '((:separate company-bibtex
		    ;; deactivate company-reftex-labels because it is too slow
		    ;; company-reftex-labels
                    company-reftex-citations
		    company-math-symbols-latex
		    company-math-symbols-unicode
		    company-latex-commands))
       company-backends))

(use-package counsel
  :config
  (counsel-mode))

(use-package ivy
  :demand
  :custom
  (ivy-use-virtual-buffers t)
  (ivy-count-format "%d/%d ")
  :config
  (ivy-mode)
  (ivy-configure 'counsel-imenu
    :update-fn 'auto))

(use-package swiper
  :config
  ;; swiper is slow for large files so it is replaced by isearch for large files
  (defun my-search-method-according-to-numlines ()
    "Determine the number of lines of current buffer and chooses a
 search method accordingly."
    (interactive)
    (if (< (count-lines (point-min) (point-max)) 20000)
	(swiper)
      (isearch-forward)))
  :bind ("C-s" . my-search-method-according-to-numlines))

(use-package ivy-xref
  :init
  (setq xref-show-definitions-function #'ivy-xref-show-defs))

(use-package ivy-prescient
  :after counsel
  :config
  (ivy-prescient-mode))

(use-package ivy-rich
  :after nerd-icons-ivy-rich
  :init (ivy-rich-mode +1))

(use-package magit
  :init
  ;; this binds `magit-project-status' to `project-prefix-map' when project.el is loaded.
  (require 'magit-extras)
  :bind ("C-x g" . magit-status)
  :custom
  (magit-diff-refine-hunk (quote all))
  :config
  ; Do not diff when committing
  (remove-hook 'server-switch-hook 'magit-commit-diff)
  (remove-hook 'with-editor-filter-visit-hook 'magit-commit-diff))

(use-package tex
  :ensure auctex
  :hook
  (TeX-mode . latex-math-mode)
  (TeX-mode . turn-on-reftex)
  (TeX-mode . TeX-fold-buffer)
  (org-mode . TeX-fold-buffer)
  ;; (TeX-mode . flymake-mode)
  :hook
  (TeX-mode . TeX-fold-mode)
  (org-mode . TeX-fold-mode)
  :custom
  (TeX-auto-save t)
  (TeX-save-query nil) ; don't ask to save the file before compiling
  (TeX-parse-self t)
  (LaTeX-item-indent 0)
  (LaTeX-default-options "12pt")
  ;; (LaTeX-math-abbrev-prefix "²")
  (TeX-source-specials-mode 1)
  (TeX-source-correlate-mode t)
  (TeX-source-correlate-method (quote synctex))
  (TeX-source-correlate-start-server (quote ask))
  ;;(TeX-PDF-mode t)
  (TeX-electric-sub-and-superscript 1)
  (LaTeX-math-list
   '(
     (?\) "right)")
     (?\( "left(")
     (?/ "frac{}{}")
     ))

  ;; Preview
  (preview-auto-cache-preamble t)
  (preview-default-option-list '("displaymath" "graphics" "textmath"))

  ;; Fold-mode

  ;; Personalize the list of commands to be folded
  (TeX-fold-macro-spec-list
   '(("[f]"
      ("footnote" "marginpar"))
     ("[c]"
      ("citeyear" "citeauthor" "citep" "citet" "cite"))
     ("[l]"
      ("label"))
     ("[r]"
      ("ref" "pageref" "eqref" "footref" "fref" "Fref"))
     ("[i]"
      ("index" "glossary"))
     ("[1]:||*"
      ("item"))
     ("..."
      ("dots"))
     ("(C)"
      ("copyright"))
     ("(R)"
      ("textregistered"))
     ("TM"
      ("texttrademark"))
     (1
      ("part" "chapter" "section" "subsection" "subsubsection" "
paragraph" "subparagraph" "part*" "chapter*" "section*" "
subsection*" "subsubsection*" "paragraph*" "subparagraph*" "emph" "
textit" "textsl" "textmd" "textrm" "textsf" "texttt" "textbf" "
textsc" "textup"))))
  ;; Prevent folding of math to let prettify-symbols do the job
  (TeX-fold-math-spec-list-internal nil)
  (TeX-fold-math-spec-list nil)
  (LaTeX-fold-math-spec-list nil)
  :config
  (setq-default TeX-auto-parse-length 200
		TeX-master nil)

  

  (defun my-tex-compile ()
    "Save and compile TeX document"
    (interactive)
    (save-buffer)
    (TeX-command-menu "latex"))

  ;; Beamer
  (defun my-tex-frame ()
    "Run pdflatex on current frame.  Frame must be declared as an environment."
    (interactive)
    (let (beg)
      (save-excursion
	(search-backward "\\begin{frame}")
	(setq beg (point))
	(forward-char 1)
	(LaTeX-find-matching-end)
	(TeX-pin-region beg (point))
	(cl-letf (( (symbol-function 'TeX-command-query) (lambda (x) "LaTeX")))
	  (TeX-command-region)))))
  :bind
  (:map TeX-mode-map
	("C-c e" . TeX-next-error)
	("M-RET" . latex-insert-item)
	("S-<return>" . my-tex-frame)
	("<f9>" . my-tex-compile)))

(use-package reftex
  :hook
  (org-mode . reftex-mode)
  :custom
  (reftex-bibpath-environment-variables (quote ("BIBINPUTS")))
  (reftex-default-bibliography '("References.bib"))
  (reftex-cite-format (quote natbib))
  (reftex-sort-bibtex-matches (quote author))
  (reftex-plug-into-AUCTeX t)
  (reftex-label-alist '(AMSTeX)) ; Use \eqref by default instead of \ref
  ;; Increase reftex speed (especially on Windows)
  (reftex-enable-partial-scans t)
  (reftex-save-parse-info t)
  (reftex-use-multiple-selection-buffers t)
  :bind (:map reftex-mode-map
	      ("C-c f" . reftex-fancyref-fref)
	      ("C-c F" . reftex-fancyref-Fref)))

(use-package cdlatex
  :config
  ;; Prevent cdlatex from defining LaTeX math subscript everywhere
  (define-key cdlatex-mode-map "_" nil)
  ;; Allow tab to be used to indent when the cursor is at the beginning of the
  ;; line
  (defun my-cdlatex-indent-maybe ()
    "Indent in TeX when CDLaTeX is active"
    (when (or (bolp) (looking-back "^[ \t]+"))
      (LaTeX-indent-line)))
  (defun my-slow-company ()
    "Slow down company for a better use of CDLaTeX"
    (make-local-variable 'company-idle-delay)
		  (setq company-idle-delay 0.3))
  :custom
  (cdlatex-command-alist
	'(("equ*" "Insert equation* env"   "" cdlatex-environment ("equation*") t nil)))
  (cdlatex-math-symbol-prefix ?\262) ; correspond to key "²"
  :hook
  (LaTeX-mode . turn-on-cdlatex)
  (LaTeX-mode . my-slow-company)
  (org-mode . my-slow-company)
  (cdlatex-tab . my-cdlatex-indent-maybe))

(use-package org
  :ensure nil
  :mode ("\\.org\\'" . org-mode)
  :hook
  (org-mode . turn-on-org-cdlatex)
  ;; No need to save RefTeX info in org
  (org-mode . (lambda()
		(make-local-variable 'reftex-save-parse-info)
		(setq reftex-save-parse-info nil)))
  :custom
  (org-export-with-LaTeX-fragments t)       ; Export LaTeX fragment to HTML
  (org-edit-src-content-indentation 0)
  (org-todo-keywords '((type "TODO(t)" "STARTED(s)" "WAITING(w)" "|" "DONE(d)")))
  (org-tag-alist '(("OFFICE" . ?o) ("COMPUTER" . ?c) ("HOME" . ?h) ("PROJECT" . ?p) ("CALL" . ?a) ("ERRANDS" . ?e) ("TASK" . ?t)))
  (org-confirm-babel-evaluate nil)
  (org-refile-targets '((nil :maxlevel . 3)))
  ;; Appareance
  (org-pretty-entities 1) ; equivalent of prettify symbols for org
  ; remove some prettification for sub- and superscripts because it makes editing difficult
  (org-pretty-entities-include-sub-superscripts nil) 
  (org-hide-emphasis-markers t) ; remove markup markers
  (org-ellipsis " [+]")
  (org-highlight-latex-and-related '(native))
  (org-startup-indented t) ; Indent text relative to section
  (org-startup-with-inline-images t)
  (org-startup-with-latex-preview t)
  (org-cycle-inline-images-display t)
  :config
  (org-defkey org-cdlatex-mode-map "²" 'cdlatex-math-symbol)
  ;; Font-locking of reference commands in org-mode
  (font-lock-add-keywords
   'org-mode
   '(("\\(\\(?:\\\\\\(?:label\\|ref\\|eqref\\)\\)\\){\\(.+?\\)}"
      (1 font-lock-keyword-face)
      (2 font-lock-constant-face))))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (R . t)
     (shell . t))))

(use-package org-appear
  :hook
  (org-mode . org-appear-mode))

(use-package org-modern
    :hook
    (org-mode . global-org-modern-mode))

(use-package oc
  :ensure nil
  :custom
  (org-cite-global-bibliography
   (list (substitute-in-file-name "${BIBINPUTS}/References.bib"))))

(use-package org-fragtog
  :hook
  (org-mode . org-fragtog-mode))

(setq org-modern-priority-faces
       (quote (
	       (?A :background "red"
                   :foreground "white")
	       (?B :background "orange"
		         :foreground "white")
	       (?C :background "aquamarine2"
		         :foreground "white")
	       (?D :background "lightskyblue"
		         :foreground "white")
	       )
	      )
       )

(use-package org-roam
  :ensure t
  :demand t
  :init
  (setq org-roam-v2-ack t)
  (setq org-roam-node-display-template "${tags:50} ${title:100}")
  :custom
  (org-roam-directory "~/Documents/RoamNotes") 
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(
     ("d" "default" plain
      "%?"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
      ("a" "article" plain
      (file "~/Documents/RoamNotes/Templates/article-template.org")
      :if-new (file+head "references/notes/${citekey}.org" "#+title: ${citekey}\n")
      :unnarrowed t)
     ("c" "code commandes" plain
      (file "~/Documents/RoamNotes/Templates/code-commandes-template.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("p" "projet" plain
      (file "~/Documents/RoamNotes/Templates/projects-templates.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     )
   )
  (org-roam-dailies-capture-templates
    '(("d" "default" entry "* %?"
       :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: :daily:"))))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
	 ("C-c n o" . org-id-get-create)
	 ("C-c n A" . org-roam-alias-add)
	 ("C-c n t" . org-roam-tag-add)
	 ("C-c n I" . org-roam-node-insert-immediate)
         ("C-c n p" . my/org-roam-find-project)
	 ("C-c n a" . my/org-roam-find-article)
	 ("C-c n S" . my/org-roam-find-slipbox)
         ("C-c n T" . my/org-roam-capture-task)
         ("C-c n b" . my/org-roam-capture-inbox)
         :map org-mode-map
         ("C-M-i" . completion-at-point)
         :map org-roam-dailies-map
         ("Y" . org-roam-dailies-capture-yesterday)
         ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
  :config
(org-roam-setup)
(require 'org-roam-dailies) ;; Ensure the keymap is available
  (org-roam-db-autosync-mode))

(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (push arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))

(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun my/org-roam-refresh-agenda-list ()
  (interactive)
  (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project"))) ;;tags entering in the agenda

;; Build the agenda list the first time for the session
(my/org-roam-refresh-agenda-list)

(defun my/org-roam-project-finalize-hook ()
  "Adds the captured project file to `org-agenda-files' if the
capture was not aborted."
  ;; Remove the hook since it was added temporarily
  (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Add project file to the agenda list if the capture was confirmed
  (unless org-note-abort
    (with-current-buffer (org-capture-get :buffer)
      (add-to-list 'org-agenda-files (buffer-file-name)))))

(defun my/org-roam-find-project ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Select a project file to open, creating it if necessary
  (org-roam-node-find
   nil
   nil
   (my/org-roam-filter-by-tag "Project")
   nil
   :templates
   '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n"
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
      :unnarrowed t))))

(defun my/org-roam-find-slipbox ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Select a project file to open, creating it if necessary
  (org-roam-node-find
   nil
   nil
   (my/org-roam-filter-by-tag "Slip_box")
   nil
   :templates
   '(("S" "Slip_box" plain ""
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Slip_box\n* Note\n\n\n*Note précédente :* \n\n*Note suivante :* \n\n*Notes liées :* ")
      :unnarrowed t))))

(defun my/org-roam-find-article ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Select a project file to open, creating it if necessary
  (org-roam-node-find
   nil
   nil
   (my/org-roam-filter-by-tag "article")
   nil
   :templates
   '(("a" "article" plain (file "~/Documents/RoamNotes/Templates/article-template.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n")
      :unnarrowed t))))

(defun my/org-roam-capture-inbox ()
  (interactive)
  (org-roam-capture- :node (org-roam-node-create)
                     :templates '(("i" "inbox" plain "* %?"
                                  :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))

(defun my/org-roam-capture-task ()
  (interactive)
  ;; Add the project file to the agenda after capture is finished
  (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

  ;; Capture the new task, creating the project file if necessary
  (org-roam-capture- :node (org-roam-node-read
                            nil
                            (my/org-roam-filter-by-tag "Project"))
                     :templates '(("p" "project" plain "** TODO %?"
                                   :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                          "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                          ("Tasks"))))))

;;(defun my/org-roam-copy-todo-to-today ()
 ;; (interactive)
 ;; (let ((org-refile-keep t) ;; Set this to nil to delete the original!
   ;;     (org-roam-dailies-capture-templates
  ;;        '(("t" "tasks" entry "%?"
  ;;           :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n#+filetags: daily" ("Tasks")))))
   ;;     (org-after-refile-insert-hook #'save-buffer)
   ;;     today-file
   ;;     pos)
   ;; (save-window-excursion
   ;;   (org-roam-dailies--capture (current-time) t)
   ;;   (setq today-file (buffer-file-name))
   ;;   (setq pos (point)))

    ;; Only refile if the target file is different than the current file
  ;;  (unless (equal (file-truename today-file)
      ;;             (file-truename (buffer-file-name)))
    ;;  (org-refile nil nil (list "Tasks" today-file nil pos)))))
;;
;;(add-to-list 'org-after-todo-state-change-hook
   ;;          (lambda ()
    ;;           (when (equal org-state "DONE")
      ;;           (my/org-roam-copy-todo-to-today))))

(defun remove-priority-on-done ()
  "Remove priority when TODO item is marked as DONE."
  (when (string= org-state "DONE")
    (org-priority ?\s)))

(add-hook 'org-after-todo-state-change-hook 'remove-priority-on-done)

(use-package org-roam-ui
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

;;Function to center or shrink the agenda.
(defun org-agenda-center ()
  ;; Check if the current buffer is an org-agenda buffer
  (when (eq major-mode 'org-agenda-mode)
    ;; Activate olivetti-mode if the agenda was opened using 'org-agenda' function
    (when (eq this-command 'org-agenda)
      ;; Activate olivetti-mode when 'c' is pressed
      (define-key org-agenda-mode-map "c"
        (lambda ()
          (interactive)
          (if (not olivetti-mode)
              (olivetti-mode 1)
	    ;;if Olivetti il already active, then shrink the width at x
            (olivetti-set-width 130)))))))

;; Adds hook to org agenda mode, making follow mode active in org agenda
(add-hook 'org-agenda-mode-hook 'org-agenda-center)

;; Function to decenter the agenda.
(defun org-agenda-decenter ()
  ;; Check if the current buffer is an org-agenda buffer
  (when (eq major-mode 'org-agenda-mode)
    ;; Activate olivetti-mode if the agenda was opened using 'org-agenda' function
    (when (eq this-command 'org-agenda)
      ;; Activate olivetti-mode when 'd' is pressed
      (define-key org-agenda-mode-map "d"
		  (lambda ()
		    (interactive)
		    (if (olivetti-mode)
		    (olivetti-mode 0)))))))

;; Add hook to org-agenda-mode, activate olivetti-mode only when org-agenda function is called and 'd' is pressed
(add-hook 'org-agenda-mode-hook 'org-agenda-decenter)

;;Center directly the agenda if it is open with the 'org-agenda-list' function
(defun org-agenda-open-hook-2 ()
  ;; Check if the current buffer is an org-agenda buffer
  (when (eq major-mode 'org-agenda-mode)
    ;; Check if org-agenda-list function was called to open the buffer
    (when (eq this-command 'org-agenda-list)
      ;; Activate olivetti-mode only when org-agenda-list is called
      (olivetti-mode 1))))

;; Ajoute le hook à org-agenda-mode, ne faisant activer le mode olivetti que lorsque org-agenda-list est appelée
(add-hook 'org-agenda-mode-hook 'org-agenda-open-hook-2)

;; Define keybind to open fast the agenda
(global-set-key (kbd "C-c n n a") 'org-agenda-list)
(global-set-key (kbd "C-c n n t") 'org-todo-list)

;; Only show one day of the agenda at a time
(setq org-agenda-span 1
      org-agenda-start-day "+0d")

;; Hide duplicates of the same todo item
;; If it has more than one of timestamp, scheduled,
;; or deadline information
(setq org-agenda-skip-timestamp-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-agenda-skip-timestamp-if-deadline-is-shown t)

;; Ricing org agenda
(setq org-agenda-current-time-string "")
(setq org-agenda-time-grid '((daily) () "     " ""))

(setq org-agenda-hide-tags-regexp ".*")

(setq org-agenda-prefix-format '(
(agenda . "  %?-2i %t %s ")
 (todo . " %i %-15:c")
 (tags . " %i %-15:c")
 (search . " %i %-15:c")))

(setq org-agenda-category-icon-alist
      `(
        ("Vie" ,(list (all-the-icons-faicon "home" :v-adjust 0.005)) nil nil :ascent center)
	("Haute Couture" ,(list (nerd-icons-faicon "nf-fa-cut" :height 0.9)) nil nil :ascent center)
	("Econométrie" ,(list (nerd-icons-faicon "nf-fa-chart_line" :height 0.9)) nil nil :ascent center)
	("Code" ,(list (nerd-icons-faicon "nf-fa-code" :height 0.9)) nil nil :ascent center)
	("Sport" ,(list (nerd-icons-faicon "nf-fa-dumbbell" :height 0.9)) nil nil :ascent center)
	("Emacs Improve" ,(list (nerd-icons-sucicon "nf-custom-orgmode" :height 0.9)) nil nil :ascent center)
	("Economie mondiale" ,(list (nerd-icons-mdicon "nf-md-earth" :height 0.9)) nil nil :ascent center)
	("Théâtre" ,(list (nerd-icons-faicon "nf-fa-masks_theater" :height 0.9)) nil nil :ascent center)
	)
      )

;; Load org-super-agenda
(require 'org-super-agenda)
(org-super-agenda-mode t)

(setq org-super-agenda-groups
       '(;; Each group has an implicit boolean OR operator between its selectors.

         ;; This is the first filter, anything found here
         ;; will be placed in this group
         ;; even if it matches following groups

	 (:name "Today"
		:date today
		:scheduled today
		:order 3)

	 (:name "Deadline Retard"
		:deadline past
		:order 1
		:face '(error :underline t))

         (:name "Retard" ; Name
                :scheduled past ; Filter criteria
                :order 2 ; Order it should appear in agenda view
                :face 'error) ; Font face used for text

	 (:name "Deadline"
		:deadline t
		:order 2
		:face 'warning)

         (:name "Perso" ; Name
                :tag "life" ; Filter criteria
                :order 4 ; Order it should appear in the agenda view
                ) ; Font faced used for text

         (:name "Travail"  ; Name
                :tag "work" ; Filter criteria
                :order 3 ; Order it should appear in the agenda view
                :face '(:background "white")) ; Font face used for text

	 (:name "Savoir"
		:tag "savoir"
		:order 3)

         ;; Fourth filter..
         (:name "Autre"  ; Optionally specify section name
                :order 5 ; Order it should appear in the agenda view
                )
        )
)

;; Utilisation des packages nécessaires
(use-package helm-bibtex)
(use-package org-ref)
(use-package org-roam-bibtex)
(use-package org-noter)

;; IMP: Ensure 'latexmk' installed as a system package!
;; see also: http://www.jonathanleroux.org/bibtex-mode.html

;; Fichier qui contient la bibliographie
(setq bibtex-completion-bibliography '("~/Documents/RoamNotes/references/master.bib"))  ; location of .bib file containing bibliography entries
(setq bibtex-completion-find-additional-pdfs t)                          ; support for multiple pdfs for one %citekey
(setq bibtex-completion-pdf-field "File")                                ; in bib entry, file = {/path/to/file.pdf} could be set to locate the accompanying file
(setq bibtex-completion-library-path '("~/Documents/RoamNotes/references/documents/"))  ; in this dir, %citekey-name(s).pdf would automatically attach pdf(s) to %citekey
(setq bibtex-completion-notes-path "~/Documents/RoamNotes/references/notes/")           ; dir to keep notes for the pdfs

;; BEGIN: Change insert citation (<f3>) behaviour of helm-bibtex for org-mode 
(defun custom/bibtex-completion-format-citation-org (keys)
  "Custom cite definition for org-mode"
  (s-join ", "
	  (--map (format "cite:&%s" it) keys)))

(setq bibtex-completion-format-citation-functions
      '((org-mode      . custom/bibtex-completion-format-citation-org)
	(latex-mode    . bibtex-completion-format-citation-cite)
	(markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
	(python-mode   . bibtex-completion-format-citation-sphinxcontrib-bibtex)
	(rst-mode      . bibtex-completion-format-citation-sphinxcontrib-bibtex)
	(default       . bibtex-completion-format-citation-default))
      )
;; END: Change insert citation (<f3>) behaviour of helm-bibtex for org-mode

(setq bibtex-autokey-year-length 4                          ; customisations for 'bibtex-generate-autokey'
      bibtex-autokey-name-year-separator "-"                ; press C-c C-c (bibtex-clean-entry) on a bib entry w/o %citekey
      bibtex-autokey-year-title-separator "-"               ; to automatically insert a %citekey based on meta data
      bibtex-autokey-titleword-separator "-"                ; use M-x crossref-add-bibtex-entry <ret>: to add an entry from
      bibtex-autokey-titlewords 2                           ; https://www.crossref.org/
      bibtex-autokey-titlewords-stretch 1
      bibtex-autokey-titleword-length 5)


;(setq bibtex-completion-edit-notes-function 'bibtex-completion-edit-notes-default) ; default to org-ref for notes
(setq bibtex-completion-edit-notes-function 'orb-bibtex-completion-edit-note) ; use org-roam-capture-templates for notes


(setq org-noter-notes-search-path '("~/Documents/RoamNotes/references/notes/")) ; V IMPORTANT: SET FULL PATH!

(setq orb-preformat-keywords '("citekey" "title" "url" "author-or-editor" "keywords" "file") ; customisation for notes, org-noter integration
      orb-process-file-keyword t
      orb-attached-file-extensions '("pdf"))

;(setq org-roam-capture-templates                    ; Org-roam capture templates
 ;     '(
	;("d" "default" plain
	 ;"%?"
	 ;:target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
	;		    "#+title: ${title}\n#+filetags: :article:")
	; :empty-lines 1
;	 :unnarrowed t)
;	("b" "bibliography notes" plain             ; Org-noter integration
 ; (file "~/Documents/RoamNotes/Templates/article-template.org")
	; :target (file+head "references/notes/${citekey}.org"
	;		    "#+title: ${citekey}\n")
	 ;:empty-lines 1)
	;)
   ;   )

;; Keybind pour affficher l'interface helm-bibtex
(global-set-key (kbd "C-c n b") 'helm-bibtex) ; keybinding

(defun my-unfill-paragraph ()
  "Unfill paragraph."
  (interactive)
  (let ((fill-column (point-max)))
  (fill-paragraph nil)))

(defun my-unfill-region (start end)
  "Unfill region."
  (interactive "r")
  (let ((fill-column (point-max)))
    (fill-region start end nil)))

(setq-default fill-column 80)

(use-package adaptive-wrap)

(use-package visual-fill-column
  :custom
  (visual-fill-column-width 100)
  :config
  (defun my-visual-fill ()
    "Toggle visual fill column, visual line mode, and adaptive wrap mode."
    (interactive)
    (visual-line-mode 'toggle)
    (visual-fill-column-mode 'toggle)
    ;; org-indent does play nicely with adaptive-wrap-prefix-mode so we exclude the later in org
    (unless (member major-mode '(org-mode))
      (adaptive-wrap-prefix-mode 'toggle)))

  (defun my-center-text ()
    "Center text in visual fill column."
    (interactive)
    (setq-local visual-fill-column-center-text t))

  (defun my-uncenter-text ()
    "Uncenter text in visual fill column."
    (interactive)
    (setq-local visual-fill-column-center-text nil))
  :bind ("C-c v" . my-visual-fill)
  :hook
  (bibtex-mode   . my-visual-fill)
  (text-mode     . my-visual-fill)
  (org-roam-mode . my-visual-fill)
  (magit-mode    . my-visual-fill)
  (org-agenda-mode . my-visual-fill)
  )

(use-package yasnippet
  :custom
  (yas-use-menu nil)
  (unbind-key "<tab>" yas-minor-mode-map)
  (unbind-key "TAB" yas-minor-mode-map)
  :config
  (yas-global-mode 1)
  :bind (:map yas-minor-mode-map
	      ("M-C-TAB"   . yas-next-field-or-maybe-expand)
	      ("M-C-<tab>" . yas-next-field-or-maybe-expand)))

(use-package ess
  :init
  (require 'ess-site)
  :mode ("renv.lock" . js-json-mode)
  :bind (:map ess-r-mode-map
	      ;; Shortcut for pipe |>
        ("C-S-m"   . " |>")
	      ;; Shortcut for pipe %>%
	      ("C-%"     . " %>%")
	      ;; Shortcut for assign <-
	      ("M--"     . ess-insert-assign)
	      ("<f9>"    . my-run-rscript-on-current-buffer-file)
        :map inferior-ess-r-mode-map
        ("C-S-m" . " |>")
        ("C-%"   . " %>%")
	      ("M--"   . ess-insert-assign)
	      :map inferior-ess-mode-map
	      ("<home>" . comint-bol))
  :custom
  (ess-roxy-str "#'")
  (ess-roxy-template-alist
   '(("description" . ".. content for \\description{} (no empty lines) ..")
     ("details" . ".. content for \\details{} ..")
     ("param" . "")
     ("return" . "")))
  (ess-nuke-trailing-whitespace-p t)
  (ess-assign-list '(" <-" " <<- " " = " " -> " " ->> "))
  (ess-style 'RStudio)  ; Set code indentation
  (ess-ask-for-ess-directory nil) ; Do not ask what is the project directory
  ;; Following the "source is real" philosophy put forward by ESS, one should
  ;; not need the command history and should not save the workspace at the end
  ;; of an R session. Hence, both options are disabled here.
  (inferior-R-args "--no-restore-history --no-save ")
  :config
  ;; Background jobs for R as in RStudio
  (defun my-run-rscript (arg title)
    "Run Rscript in a compile buffer"
    (let*
	((is-file (file-exists-p arg))
	 (working-directory
	  (if is-file default-directory (file-name-directory arg)))
	 ;; Generate a unique compilation buffer name
	 (combuf-name (format "*Rscript-%s*" title))
	 ;; Get the existing compilation buffer, if any
         (combuf (get-buffer combuf-name))
         (compilation-buffer-name-function
	  (lambda (_) combuf-name)) ; Set the compilation buffer name function
	 ;; Automatically save modified buffers without asking
         (compilation-ask-about-save nil))
      (when combuf
	(kill-buffer combuf)) ; Kill the existing compilation buffer
      ;; Create a new compilation buffer
      (setq combuf (get-buffer-create combuf-name))
      (with-current-buffer combuf
	;; Set the default directory of the compilation buffer
	(setq default-directory working-directory)
	;; Delete any existing content in the compilation buffer
	(delete-region (point-min) (point-max))
	(compilation-mode)) ; Enable compilation mode in the buffer
      (compile (format "Rscript %s" arg)) ; Execute the R script using Rscript
      (with-current-buffer combuf
	;; Rename the compilation buffer to its final name
	(rename-buffer combuf-name))))

  (defun my-run-rscript-on-current-buffer-file ()
    "Run Rscript on the file associated to the current buffer"
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
	(my-run-rscript filename (file-name-base filename)))))

  (defun my-run-rscript-on-file ()
    "Run Rscript on the file associated to a file"
    (interactive)
    (let ((filename (read-file-name "R script: ")))
      (my-run-rscript filename (file-name-base filename))))

  (defun my-inferior-ess-init ()
  "Workaround for https://github.com/emacs-ess/ESS/issues/1193"
   (add-hook 'comint-preoutput-filter-functions #'xterm-color-filter -90 t)
   (setq-local ansi-color-for-comint-mode nil)
   (smartparens-mode 1))

  (defun my-ess-remove-project-hook ()
    "Remove a useless hook added by ess to use its own project functions"
    (make-local-variable 'project-find-functions)
    (setq project-find-functions '(project-try-vc)))
  :hook
  (inferior-ess-mode . my-inferior-ess-init)
  (inferior-ess-mode . my-ess-remove-project-hook)
  (ess-r-mode . my-ess-remove-project-hook)
  ;; Outlining like in RStudio
  (ess-r-mode . (lambda ()
    (setq outline-regexp "^[[:space:]]*#+ +.*\\(----\\|====\\|####\\)")
    (defun outline-level ()
           (cond ((looking-at "^[[:space:]]*# ") 1)
             ((looking-at "^[[:space:]]*## ") 2)
             ((looking-at "^[[:space:]]*### ") 3)
             ((looking-at "^[[:space:]]*#### ") 4)
             (t 1000))))))

(use-package rutils
  :defer t
  :after ess)

(use-package smartparens-config
  :ensure smartparens
  :init
  (progn
    (add-hook 'prog-mode-hook 'smartparens-mode)
    (add-hook 'markdown-mode-hook 'smartparens-mode)
    (add-hook 'yaml-mode-hook 'smartparens-mode)
    (add-hook 'org-mode-hook 'smartparens-mode)
    (add-hook 'latex-mode-hook 'smartparens-mode))
  :config (progn (show-smartparens-global-mode t)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cursor-type 'bar)
 '(keyboard-coding-system 'utf-8)
 '(org-format-latex-options
   '(:foreground default :background default :scale 1.75 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
		 ("begin" "$1" "$" "$$" "\\(" "\\[")))
 '(package-selected-packages
   '(rainbow-delimiters ligature nerd-icons-completion nerd-icons-ibuffer nerd-icons-ivy-rich nerd-icons-dired rainbow-mode ivy-rich magit org-roam rutils ess org org-fragtog org-modern org-appear cdlatex yasnippet ivy-prescient ivy-xref counsel company-box company-reftex company-math company-bibtex company visual-fill-column adaptive-wrap auctex doom-themes doom-modeline)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "JetBrains Mono" :foundry "outline" :slant normal :weight regular :height 120 :width normal)))))

(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))

;;; init.el ends here
